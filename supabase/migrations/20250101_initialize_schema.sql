/*
  # AI ImageForge Initial Schema
  This migration sets up the core tables for the application.

  ## Tables Created:
  - **users**: Stores user profile information, credits, and subscription status.
  - **images**: Stores information about each generated image, including the prompt and a link to the image.

  ## Security:
  - Row Level Security (RLS) is enabled for all tables.
  - Policies are created to ensure users can only access and manage their own data.
  - The `users` table allows public read access for basic profile info but restricts modification.
  - The `images` table is fully restricted to the user who created the images.
*/

-- Create the users table
CREATE TABLE IF NOT EXISTS public.users (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    email text UNIQUE,
    display_name text,
    avatar_url text,
    credits smallint DEFAULT 50 NOT NULL CHECK (credits >= 0),
    is_subscribed boolean DEFAULT false NOT NULL,
    stripe_customer_id text,
    created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL
);

-- Add comments to the users table columns
COMMENT ON TABLE public.users IS 'User profile and application-specific data.';
COMMENT ON COLUMN public.users.id IS 'References the user in Supabase auth.';
COMMENT ON COLUMN public.users.credits IS 'Number of free image generation credits remaining.';
COMMENT ON COLUMN public.users.is_subscribed IS 'True if the user has an active subscription.';
COMMENT ON COLUMN public.users.stripe_customer_id IS 'Stores the customer ID from Stripe for billing.';

-- Create the images table
CREATE TABLE IF NOT EXISTS public.images (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    prompt text NOT NULL,
    image_url text NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL
);

-- Add comments to the images table columns
COMMENT ON TABLE public.images IS 'Stores images generated by users.';
COMMENT ON COLUMN public.images.user_id IS 'The user who generated the image.';
COMMENT ON COLUMN public.images.prompt IS 'The text prompt used to generate the image.';
COMMENT ON COLUMN public.images.image_url IS 'URL of the generated image stored in a bucket.';

-- Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_images_user_id ON public.images(user_id);

-- Enable Row Level Security
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.images ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for the users table
CREATE POLICY "Users can view their own profile"
ON public.users FOR SELECT
TO authenticated
USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile"
ON public.users FOR UPDATE
TO authenticated
USING (auth.uid() = id);

-- Create RLS policies for the images table
CREATE POLICY "Users can view their own images"
ON public.images FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

CREATE POLICY "Users can create images"
ON public.images FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own images"
ON public.images FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

-- Function to create a user profile on signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.users (id, email, display_name, avatar_url)
  VALUES (
    new.id,
    new.email,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url'
  );
  RETURN new;
END;
$$;

-- Trigger to call the function on new user creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();